##https://courses.edx.org/courses/course-v1:MITx+6.00.1x_8+1T2016/courseware/Week_2/Problem_Set_2/
##
##Using Bisection Search to Make the Program Faster
##
##You'll notice that in Problem 2, your monthly payment had to be a multiple of $10. Why did we make it that way? 
##You can try running your code locally so that the payment can be any dollar and cent amount (in other words, the monthly 
##payment is a multiple of $0.01). Does your code still work? It should, but you may notice that your code runs more slowly, 
##especially in cases with very large balances and interest rates. (Note: when your code is running on our servers, there are 
##limits on the amount of computing time each submission is allowed, so your observations from running this experiment on the 
##grading system might be limited to an error message complaining about too much time taken.)
##
##Well then, how can we calculate a more accurate fixed monthly payment than we did in Problem 2 without running into the problem of slow code? We can make this program run faster using a technique introduced in lecture - bisection search!
##
##The following variables contain values as described below:
##
##balance - the outstanding balance on the credit card
##
##annualInterestRate - annual interest rate as a decimal

monthlyInterestRate=annualInterestRate/12
lb=balance/12
ub=(balance*((1+monthlyInterestRate)**12))/12
new_bal=balance
monthly_payment=(lb+ub)/2
while (new_bal)>0.01 or new_bal<-0.01:
    new_bal=balance
    monthly_payment=(lb+ub)/2
    for n in range(1,13):
        rem_bal=(new_bal-((lb+ub)/2))
        interest=((annualInterestRate/12)*rem_bal)
        new_bal=rem_bal+interest
    if (new_bal)>0:
        lb=monthly_payment
    else:
        ub=monthly_payment
monthly_payment=round(monthly_payment,2)
print("Lowest Payment: "+str(monthly_payment))
